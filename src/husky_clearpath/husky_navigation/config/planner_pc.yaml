controller_frequency: 5.0   # 5.0
recovery_behaviour_enabled: false # true

NavfnROS:
  allow_unknown: true       # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  default_tolerance: 0.2    # 0.1 # A tolerance on the goal point for the planner.
  visualize_potential: true # potential area via pointcloud


DWAPlannerROS:              # http://wiki.ros.org/dwa_local_planner

  #---- Robot configuration parameters   ----
  acc_lim_x: 2.5
  acc_lim_y: 0
  acc_lim_th: 3.2
  max_vel_x: 0.5
  min_vel_x: 0.0
  max_vel_y: 0.5
  min_vel_y: 0.0
  max_vel_trans: 0.4  # max is 1.0
  min_vel_trans: 0.05 #0.1
  max_vel_theta: 0.2  #0.15
  min_vel_theta: 0.02 #0.08




  #----  Goal Tolerance Parameters ---- 
  yaw_goal_tolerance: 0.1   #(double, default: 0.05)    The tolerance in radians for the controller in yaw/rotation when achieving its goal 
  xy_goal_tolerance: 0.1 #0.2   #xy_goal_tolerance (double, default: 0.10)    The tolerance in meters for the controller in the x & y distance when achieving a goal 
  latch_xy_goal_tolerance: false



  # # ---- Forward Simulation Parameters ---- 
  # sim_time: 2.0       # (double, default: 1.7) The amount of time to forward-simulate trajectories in seconds 
  # sim_granularity: 0.020      # (double, default: 0.025) The step size, in meters, to take between points on a given trajectory 
  # vx_samples: 100       # (integer, default: 3) The number of samples to use when exploring the x velocity space 
  # vy_samples: 100      # (integer, default: 10) The number of samples to use when exploring the y velocity space 
  # vth_samples: 100     # (integer, default: 20) The number of samples to use when exploring the theta velocity space 
  # # controller_frequency: 20.0       # (double, default: 20.0) The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset. 


  # ---- Trajectory Scoring Parameters ----  The cost function used to score each trajectory is in the following form:
  # 
  # cost =    path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
  #         + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
  #         + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  # path_distance_bias: 0.006  #0.06    #0.6 # (double, default: 32.0)     The weighting for how much the controller should stay close to the path it was given 
  # traversability_distance_bias: 1.5 # 1.1  # (double, default: 1.0)     The weighting for traversability --improve definition
  # goal_distance_bias: 0.08   #0.08    #0.8 # (double, default: 24.0)     The weighting for how much the controller should attempt to reach its local goal, also controls speed 
  # occdist_scale: 0  #0.0001 #10             # (double, default: 0.01)     The weighting for how much the controller should attempt to avoid obstacles 
  #                             # Set to 0 to make it go through the "obstacles"

  # path_distance_bias: 0.0006  #0.06    #0.6 # (double, default: 32.0)     The weighting for how much the controller should stay close to the path it was given 
  # goal_distance_bias: 0.0008   #0.08    #0.8 # (double, default: 24.0)     The weighting for how much the controller should attempt to reach its local goal, also controls speed 
  # occdist_scale: 0.0000000001  #0.0001 #10             # (double, default: 0.01)     The weighting for how much the controller should attempt to avoid obstacles 
  
  path_distance_bias: 0.0006  
  traversability_distance_bias: 500.0
  goal_distance_bias: 0.0006
  occdist_scale: 0.0

  # forward_point_distance:  0.2  # (double, default: 0.325)   The distance from the center point of the robot to place an additional scoring point, in meters 
  # stop_time_buffer: 0.2         # (double, default: 0.2)     The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds 
  # scaling_speed: 0.25           # (double, default: 0.25)    The absolute value of the velocity at which to start scaling the robot's footprint, in m/s 
  # max_scaling_factor: 0.2       # (double, default: 0.2)     The maximum factor to scale the robot's footprint by 
  # publish_cost_grid: true       # (bool, default: false)     Whether or not to publish the cost grid that the planner will use when planning.   ///dont seem to work
  #                             # When true, a sensor_msgs/PointCloud2 will be available on the cost_cloud topic. 
  #                             # Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.  
  # publish_cost_grid_pc: true    # dagr, from code
  # publish_traj_pc: true         # dagr, from code



  # ----  Oscillation Prevention Parameters ---- 
  # oscillation_reset_angle: 0.2
  # oscillation_reset_dist: 0.05  #(double, default: 0.05) How far the robot must travel in meters before oscillation flags are reset 


  # ----  Global Plan Parameters ---- 
  # prune_plan: true  #(bool, default: true) Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them. 